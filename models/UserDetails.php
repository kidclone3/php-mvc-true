<?php

namespace app\models;
use app\models\User;
class UserDetails extends User {
    public string $username='';
    public string $firstname = '';
    public string $lastname = '';
    public string $jobTitle = '';
    public string $profileImage = '';
    public string $dob = '1900-01-01 00:00:00';
    public string $phoneNumber = '';
    public string $address = '';
    public static function tableName(): string
    {
        return 'userDetails';
    }
    public function attributes(): array
    {
        return ['username', 'firstname', 'lastname', 'jobTitle', 'profileImage', 'dob', 'phoneNumber', 'address'];
    }
    public function rules():array {
        return [
            'firstname' => [self::RULE_REQUIRED],
            'lastname' => [self::RULE_REQUIRED],
            'email' => [self::RULE_REQUIRED],
            'username' => [self::RULE_REQUIRED],
            'jobTitle' => [self::RULE_REQUIRED],
            'dob' => [self::RULE_REQUIRED],
        ];
    }
    public function labels():array {
        return [
            'firstname' => 'Your first name',
            'lastname' => 'Your last name',
            'email' => 'Email',
            'username' => 'Username',
            'jobTitle' => 'Job title',
            'profileImage' => 'Profile image',
            'dob' => 'Date of birth',
            'phoneNumber' => 'Your phone number',
            'address' => 'Current address',
        ];
    }
    public function placeholders():array {
        return [
            'firstname' => 'Your first name',
            'lastname' => 'Your last name',
            'email' => 'Email',
            'username' => 'Username',
            'jobTitle' => 'Job title',
            'profileImage' => 'Profile image',
            'dob' => 'Date of birth',
            'phoneNumber' => 'Your phone number',
            'address' => 'Current address',
        ];
    }
    public function subtitle():array {
        return [
            'firstname' => 'Your first name',
            'lastname' => 'Your last name',
            'email' => 'Your email address',
            'username' => 'Your username',
            'jobTitle' => 'Job title',
            'profileImage' => 'Profile image',
            'dob' => 'Date of birth',
            'phoneNumber' => 'Your phone number',
            'address' => 'Current address',
        ];
    }
    public function toString() {
        return "username: ".$this->username."\n".
            "jobTitle: " . $this->jobTitle . "\n" .
            "profileImage: " . $this->profileImage . "\n" .
            "dob: " . $this->dob . "\n" .
            "phoneNumber: " . $this->phoneNumber . "\n" .
            "address: " . $this->address . "\n";
    }
    public function save()
    {
        return parent::save(); // TODO: Change the autogenerated stub
    }

    public function update():bool
    {
        if ($this->validateImage()==='error') {
            return false;
        }
        $tableName = $this->tableName();
        $attributes = $this->attributes();
        unset($attributes[array_search('username', $attributes)]);
        $params = array_map(fn($attr) => ":$attr", $attributes);
        $updateStatement = implode(', ', array_map(fn($attr) => "$attr = :$attr", $attributes));
        $condition = 'username = :username';

        $statement = self::prepare("UPDATE  $tableName SET $updateStatement WHERE $condition");
        foreach ($attributes as $attribute) {
            $statement->bindValue(":$attribute", $this->{$attribute});
        }
        $statement->bindValue(':username', $this->username);
        $statement->execute();
        return true;
    }
    public function getDisplayName(): string
    {
        return $this->firstname . ' ' . $this->lastname;
    }

    public function getPhoneNumber(): string
    {
        return $this->phoneNumber;
    }

    public function validateImage()
    {
        $status = 'empty';
        if (!empty($_FILES['profileImage']['name'])) {
            $fileName=basename($_FILES["profileImage"]["name"]);
            $fileType=pathinfo($fileName,PATHINFO_EXTENSION);

            $allowTypes = array('jpg','png','jpeg','gif');
            if(in_array($fileType, $allowTypes)){
                $image = $_FILES['profileImage']['tmp_name'];
                $imgContent = addslashes(file_get_contents($image));
                $this->profileImage = $imgContent;
                $status = 'success';
            } else {
                $status = 'error';
            }
        }
        return $status;
    }
    public function getProfileImage()
    {
        return base64_encode($this->profileImage);
    }

    public function getAddress()
    {
        return $this->address;
    }
}